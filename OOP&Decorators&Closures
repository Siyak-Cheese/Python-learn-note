************ Tutorial 1: Classes and Instances ************
> class Example:
> __init__(self,)
    # Initializes the parameters and instances of the class.
    # self is instance equal to variable.
    # var_1 = Example()
    # var_1 is self.
> def method(self):
    # self is instance of method.
> Example.method(self=variable)
    # assgin variable as self(instance)
    # let calss method know what does instance.
> exma_1.method()
    # exma_1 = self in method.

************ Tutorial 2: Classes Variables ************
> Share class variable in all instances of class.
> __dict__: namespace
> self.
> class.

************ Tutorial 3: classmethods and staticmethods ************
@classmethod
>>>
class Class_name:
    class_variable = 1
@classmethod
def class_method(cls, *args):
    cls.class_variable = args
>>>
> use classmethod as alternative constructors;
> use classmethod in order to provide multiples ways of creating our objects;

@staticmethod
> static method don't take the instance or the class as the first argument, so just pass in the arguments that
    we want to work with;
> Don't operate on the instance or the class

Summary:
> work with classes regular methods automatically pass the instance as the first argument and we call that "self";
> class methods automatically pass the class as the first argument and we call that "cls";
> static methods don't pass anything automatically they don't pass the instance or the class so really they behave just like regular funcitons except we include them in our classes because they has some logical connection with the class.

************ Tutorial 4: Inheritance - Creating Subclasses ************
> subclass could rewrite class attribute and didn't change original attribute in class. Only reference subclass the rewrite attribute will vaild.
> isinstance()
    # tell us if an object is an instance of a class.
> issubclass()
    # tell us if a class is a subclass of another.

************ Tutorial 5: Special (Magic/Dunder) Methods ************

************ str() vs repr() ************
> The goal of __repr__ is to be unambiguous.
    # developers use repr to debug code because it will return the statment.
> The goal of __str__ is to be readable.
    # users more like str than repr because it will return result of statment.

************ Decorators - Dynamically Alter The Functionality Of Your Functions ************
>Allow us to maintainer alter functionality in one localtion and easily apply it anywhere that we want to codebase.
>>> Tips:
def outer_func(origin_func): # take function argument(origin_func) pass to other function(outer_func)
    def inner_func(*args, **kwargs):
        return origin_func(*args, **kwargs)
    return inner_func

@outer_func # This statment is euqual to origin_func = outer_func(origin_func)
def origin_func(name, age):
    print(f"My name is {name}, I'm {age} years old.")

# origin_func = outer_func(origin_func)
origin_func('Test', 25) --> print: My name is Test, I'm 25 years old.

************ Closures - How to Use Them and Why They Are Useful ************
> function is object pass to variable.
> variable could be a method.
> recap: Closures allow us to take advantage of first-class functions and return an
            inner function that remember and has access to variables local to the scope in which they were created. 

************ First-Class Functions ************
>>> def First_func(x):

        def Second_func(y):
            print(f"<{x}><{y}><{x}>")

        return Second_func
    
    msg_h1 = First_func('h1') # msg is equal to Second_func(function). 'h1' pass to x.
    msg_h1('Test headline') # 'Test sencond function' pass to y.
    msg_h1('Test other headline') # 'Test other headline' pass to y.

    msg_p = First_func('p')
    msg_p('Test Paragraph!')
>>>
> recap: First function allow us to treat functions like any other object.
    # Tips: We can pass functions as arguments to another functions.
            We can return functions.
            We can assign functions to Variables.

************ Decorators With Arguments ************
> prefix_decorator ran before inner_func and can pass msg in inner_func row head.
Tips:
def prefix_decorator(prefix):
    def outer_func(origin_func):
        def inner_func(*args, **kwargs):
            print(prefix, f"Ran it before {origin_func.__name__}")
            return origin_func(*args, **kwargs)
        return inner_func
    return outer_func

@prefix_decorator("Head msg:")
def origin_func(name, age):
    print(f"My name is {name}, I'm {age} years old.")